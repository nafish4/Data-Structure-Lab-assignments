#Name: Nafis Chowdhury
#Id: 21101034
#Section: 2

class CircularArray:
    def __init__(self, lin, st, sz):
        self.start = st
        self.size = sz
        self.cir = [None]*len(lin)
        k=self.start
        for i in range(0,self.size):
            if k==len(lin):
                k=0
            self.cir[k]=lin[i]
            k+=1
    def printFullLinear(self):
        for i in range(0,len(self.cir)):
            if i==len(self.cir)-1:
                print(self.cir[i],end=" ")
            else:
                print(self.cir[i],end=", ")
        print()
    def printForward(self):
        k=self.start
        for i in range(0,self.size):
            if i==self.size-1:
                print(self.cir[k],end="")
            else:
                print(self.cir[k],end=", ")
            k+=1
            if k==len(self.cir):
                k=0
        print()
    def printBackward(self): 
        k=(self.start+self.size-1)%len(self.cir)
        for i in range(0,self.size):
            if i==self.size-1:
                print(self.cir[k],end="")
            else:
                print(self.cir[k],end=", ")
            k-=1
            if k<0:
                k=len(self.cir)-1
        print()
    def linearize(self):
        k=self.start
        lin=[0]*self.size
        for i in range(0,self.size):
            lin[i]=self.cir[k]
            k+=1
            if k==len(self.cir):
                k=0
        self.cir=lin
    def palindromeCheck(self): 
        boolean=0
        k=self.start
        rear=(self.start+self.size-1)%(len(self.cir))
        for i in range(0,self.size):
            if self.cir[k]==self.cir[rear]:
                boolean=1
                rear-=1
                k+=1
            else:
                boolean=0
                break
            if k==len(self.cir):
                k=0
            if rear<0:
                rear=len(self.cir)-1
        if boolean==0:
            print("This array is not a palindrome")
        else:
            print("This array is a palindrome")
    def resizeStartUnchanged(self, newcapacity):
        array = [None] * newcapacity
        idx = self.start
        new_idx = self.start
        while True:
            array[new_idx] = self.cir[idx]
            if idx == (self.start - 1)%len(self.cir):
                self.cir = array
                break
            idx = (idx+1) % len(self.cir)
            new_idx = (new_idx + 1) % len(array)
    def sort(self):
        i=0
        temp=0
        while i<len(self.cir):
            k=self.start
            while True:
                if self.cir[k%len(self.cir)] == None or self.cir[(k+1)%len(self.cir)] == None:
                    break
                if self.cir[k%len(self.cir)]>self.cir[(k+1)%len(self.cir)]:
                    temp=self.cir[k%len(self.cir)]
                    self.cir[k%len(self.cir)]=self.cir[(k+1)%len(self.cir)]
                    self.cir[(k+1)%len(self.cir)]=temp
                k=(k+1)%len(self.cir)
            i+=1
    def equivalent(self, cir_arr):
        count=0
        k=cir_arr.start
        if cir_arr.size==self.size:
            for i in range(0,cir_arr.size):
                if cir_arr.cir[k] in self.cir:
                    count+=1
                k=(k+1)%len(cir_arr.cir)         
        else:
            return "False"
        if count==self.size:
            return "True"
        else:
            return "False"
    def intersection(self, c2):
        k1=self.start
        if self.size<c2.size:
            new_array=[None]*self.size
        else:
            new_array=[None]*c2.size
        count=0
        for i in range(0,self.size):
            for j in range(0,len(c2.cir)):
                if self.cir[k1%len(self.cir)]==c2.cir[j] and  self.cir[k1%len(self.cir)] not in new_array:
                    new_array[count]=self.cir[k1]
                    count+=1
            k1=(k1+1)%len(self.cir)
        new_array2=[None]*count
        for i in range(0,len(new_array)):
            if new_array[i]!=None:
                new_array2[i]=new_array[i]
        return new_array2
lin_arr1 = [10, 20, 30, 40, None]


print("==========Test 1==========")
c1 = CircularArray(lin_arr1, 2, 4)
c1.printFullLinear()
c1.printForward() 
c1.printBackward() 


print("==========Test 2==========")
c1.linearize()
c1.printFullLinear() 


print("==========Test 3==========")
lin_arr2 = [10, 20, 30, 40, 50]
c2 = CircularArray(lin_arr2, 2, 5)
c2.printFullLinear() 
c2.resizeStartUnchanged(8)
c2.printFullLinear() 


print("==========Test 4==========")
lin_arr3 = [10, 20, 30, 20, 10, None, None]
c3 = CircularArray(lin_arr3, 3, 5)
c3.printForward() 
c3.palindromeCheck() 


print("==========Test 5==========")
lin_arr4 = [10, 20, 30, 20, None, None, None]
c4 = CircularArray(lin_arr4, 3, 4)
c4.printForward() 
c4.palindromeCheck() 


print("==========Test 6==========")
lin_arr5 = [10, 20, -30, 20, 50, 30, None]
c5 = CircularArray(lin_arr5, 5, 6)
c5.printForward() 
c5.sort()
c5.printForward() 


print("==========Test 7==========")
lin_arr6 = [10, 20, -30, 20, 50, 30, None]
c6 = CircularArray(lin_arr6, 2, 6)
c7 = CircularArray(lin_arr6, 5, 6)
c6.printForward()
c7.printForward() 
print(c6.equivalent(c7)) 


print("==========Test 8==========")
lin_arr7 = [10, 20, -30, 20, 50, 30, None, None, None]
c8 = CircularArray(lin_arr7, 8, 6)
c6.printForward() 
c8.printForward() 
print(c6.equivalent(c8)) 


print("==========Test 9==========")
lin_arr8 = [10, 20, 30, 40, 50, 60, None, None, None]
c9 = CircularArray(lin_arr8, 8, 6)
c6.printForward() 
c9.printForward() 
print(c6.equivalent(c9)) 


print("==========Test 10==========")
lin_arr9 = [10, 20, 30, 40, 50, None, None, None]
c10 = CircularArray(lin_arr9, 5, 5)
c10.printFullLinear() 
lin_arr10 = [5, 40, 15, 25, 10, 20, 5, None, None, None, None, None]
c11 = CircularArray(lin_arr10, 8, 7)
c11.printFullLinear() 
output = c10.intersection(c11)
print(output) 
